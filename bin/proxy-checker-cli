#!/usr/bin/env node

const fs = require('fs')
const Table = require('cli-table3')
const colors = require('colors')
const singleRequestExecute = require('../request.js')
const commandLineArgs = require('command-line-args')
const commandLineUsage = require('command-line-usage')
const Bottleneck = require('bottleneck')

const allowedProtocols = ['http', 'https', 'socks5']
const urlPresets = {
  instagram: 'https://www.instagram.com/graphql/query/?query_hash=e769aa130647d2354c40ea6a439bfc08&variables=%7B%22id%22%3A%221226157729%22%2C%22first%22%3A%221%22%2C%22after%22%3A%22%22%7D',
  avito: 'https://www.avito.ru/samara?q=%D0%B4%D0%B8%D0%B2%D0%B0%D0%BD',
  ifconfig: 'https://ifconfig.me/'
}

const optionDefinitions = [
  { 
    name: 'input', 
    type: String, 
    defaultOption: true, 
    typeLabel: '{underline file}',
    description: 'The input file to process. The file is expected to contain ip:port lines without protocol specified. This is a default argument.'
  },
  { 
    name: 'output', 
    alias: 'o', 
    type: String,
    typeLabel: '{underline file}',
    description: 'Output good ips to txt file.'
  },
  { 
    name: 'verbose', 
    alias: 'v', 
    type: Boolean,
    description: 'Turn on debug output.'
  },
  { 
    name: 'silent', 
    alias: 's', 
    type: Boolean, 
    defaultValue: false,
    description: 'Do not output visual table, only write result to files.'
  },
  { 
    name: 'help', 
    alias: 'h', 
    type: Boolean,
    description: 'Print this usage guide.'
  },
  
  { 
    name: 'timeout', 
    alias: 't', 
    type: Number, 
    defaultValue: 5,
    description: 'Number of seconds to wait for connection to proxy and for the whole request.'
  },
  { 
    name: 'protocol', 
    alias: 'p', type: String, 
    defaultValue: allowedProtocols[1],
    description: 'Protocol to append to proxy ip (the file is expected to contain ip:port lines without protocol specified).'
  },
  { 
    name: 'url', 
    alias: 'u', 
    type: String,
    defaultValue: urlPresets.ifconfig,
    description: 'Url to connect to validate proxy.'
  },
  { 
    name: 'text',
    type: String,
    description: 'Text expected in body to validate proxy.'
  },
  { 
    name: 'notext', 
    type: String,
    description: 'Text expected to not exist in body to validate proxy.'
  },
  { 
    name: 'code', 
    type: String,
    description: 'Http code expected for test to succeed.'
  },
  { 
    name: 'concurrency', 
    alias: 'c', 
    type: Number, 
    defaultValue: 20,
    description: 'Maximum Concurrency threads (default: 20)',
    typeLabel: '{underline integer}'
  }
]


const options = commandLineArgs(optionDefinitions)


const sections = [
  {
    header: 'Simple & fast proxy checker',
    content: 'Gets proxy list from file and tests them via set of checks, logging time and response result.\n Usage: `proxy-checker-cli ips.txt -t 10`'
  },
  {
    header: 'Options',
    optionList: optionDefinitions
  }
]

let r = new RegExp(options.code);


if (options.help) {
  const usage = commandLineUsage(sections)
  console.log(usage)
  return
}

if (!options.input) {
  console.error('Input file with ips is required. Try --help')
  return
}

if (!allowedProtocols.includes(options.protocol)) {
  console.error('Allowed protocols: ', allowedProtocols)
  return
}

if (!fs.existsSync(options.input)) {
  console.error('Input file does not exist!')
  return
}

if (options.silent) {
  options.verbose = false;
}

const limiter = new Bottleneck({
  maxConcurrent: options.concurrency,
  minTime: 0
})


const url = urlPresets[options.url] ? urlPresets[options.url] : options.url


let lines = fs.readFileSync(options.input, 'utf8').split('\n')


let startMs = Date.now();


let singleRequestExecuteLimited = limiter.wrap(singleRequestExecute)

promises = lines.filter(String).map((proxyAddr) => 
  singleRequestExecuteLimited(url, proxyAddr, options)
)


Promise.all(promises).then((results) => {

  if (!options.silent) {
    let table = new Table({style: {head: ['cyan']}, head: [
      'Proxy', 'Result', 'Time', 'Response'
    ]});
    results.map((item) => {
      table.push([
        item.name,
        item.success ? colors.green('TRUE') : colors.red('FALSE'),
        item.time,
        item.success ? item.response : colors.red(item.error)
      ]);
    })
    console.log(table.toString());
  }
  
  let good = results.reduce((a,c) => a + (c.success ? 1 : 0), 0);

  if (options.output) {
    let file = fs.createWriteStream(options.output);
    file.on('error', function(err) { /* error handling */ })
    results.forEach(function(v) {
      if (v.success) {
        file.write(v.name + '\n')
      }
    })
    file.end();
    if (options.verbose) {
      console.log('Results put to %s', options.output)
    }
    
  }

  if (options.verbose) {
    console.log('Finished in %s', (Date.now() - startMs)/1000 + 's')
    console.log('Found %d good proxies out of %d', good, results.length, options.output);
  }

});